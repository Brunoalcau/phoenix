/** @module contracts */
/**
 * Copyright (c) 2019 Burst Apps Team
 *
 * Credits to AJ ONeal for the two-complements stuff
 * https://coolaj86.com/articles/convert-decimal-to-hex-with-js-bigints/
 */


import './internal/padStartPolyfill';
import BigNumber from 'bignumber.js';
import {convertHexEndianess} from '@burstjs/util';

const MaxArgsCount = 3;

const bnToHex = big => {
    let bn = new BigNumber(big);

    if (bn.lt(0)) {
        bn = twosComplementBinary(bn);
    }

    const hex = bn.toString(16);
    return hex.length % 2 ? '0' + hex : hex;
};

const twosComplementBinary = (bn: BigNumber) => {
    // we manually implement our own two's complement (flip bits, add one)
    let bin = bn.multipliedBy(-1).toString(2);
    while (bin.length % 8) {
        bin = '0' + bin;
    }
    const prefix = ('1' === bin[0] && -1 !== bin.slice(1).indexOf('1')) ? '11111111' : '';
    bin = bin.split('').map(i => '0' === i ? '1' : '0').join('');
    return new BigNumber(prefix + bin, 2).plus(1);
};

/**
 * Generates a method call message of a contracts public method. The message can be sent using for example
 * [[MessageApi.sendMessage]] with `messageIsText = false`.
 * @param methodLong The long signed has number generated by BlockTalk compiler
 * @param argsLong Up to three long arguments (in string) to be passed on call
 * @see [[ContractApi.callMethod]]]
 */
export const generateMethodCallHexMessage = (methodLong: string, ...argsLong: string[]): string => {
    if (argsLong.length > MaxArgsCount) {
        throw new Error(`Only ${MaxArgsCount} arguments allowed`);
    }

    return [methodLong, ...argsLong]
        // @ts-ignore
        .map(long => bnToHex(long).padStart(16, '0'))
        .map(convertHexEndianess)
        .join('');
};
